nclude "Quadcopter.h"
#include <Wire.h>
#include "GY_85.h"

using namespace std;

void LinearUpdater(Quadcopter &);
void RotationUpdater(Quadcopter &);

Quadcopter MyQuad;
GY_85 GY85;

void setup()
{
    Wire.begin();
    delay(10);
    Serial.begin(9600);
    delay(10);
    GY85.init();
    delay(10);
}

int i = 0;

void loop()
{
    MyQuad.SetTime((double)(millis())/1000.0);
    RotationUpdater(MyQuad);
    LinearUpdater(MyQuad);
    if (i % 1000 == 0)
    DisplayState();
    i++;
}

void LinearUpdater(Quadcopter & SomeQuad){

  //  Quadcopter Quad;

  double mass = 10.0;
  double grav = 9.81;
  double weight = mass * grav;
  double dtime = SomeQuad.GetDTime();
//I'm past patiently waitin', I'm passionately smashin' every expectation, every action's an act of creation
  double * AccelVec;
  AccelVec = GetAcceleration();

  double xAccel = AccelVec[0]; //xAccel
  double yAccel = AccelVec[1]; //yAccel
  double zAccel = AccelVec[2]; //zAccel

  double q0 = SomeQuad.Getq0();
  double q1 = SomeQuad.Getq1();
  double q2 = SomeQuad.Getq2();
  double q3 = SomeQuad.Getq3();

  double xPos = SomeQuad.GetXPos();
  double yPos = SomeQuad.GetYPos();
  double zPos = SomeQuad.GetZPos();

  //bodyframe linear vel
  double u = SomeQuad.GetUVel();
  double v = SomeQuad.GetVVel();
  double w = SomeQuad.GetWVel();

  double LVelVec[3] = {u, v, w};

  //Angular Velocity, Body Frame
  double p = SomeQuad.GetPAngVel();
  double q = SomeQuad.GetQAngVel();
  double r = SomeQuad.GetRAngVel();

  //LinearForces Experienced
  double X = 0.0;
  double Y = 0.0;
  double Z = 0.0;

  double BMat[][3] =
  {{q0*q0+q1*q1-q2*q2-q3*q3, 2*(q1*q2-q0*q3),         2*(q1*q3+q0*q2)},
  {2.0*(q1*q2+q0*q3),        q0*q0-q1*q1+q2*q2-q3*q3, 2.0*(q2*q3-q0*q1)}, 
  {2.0*(q1*q3-q0*q2),        2.0*(q2*q3+q0*q1),       q0*q0-q1*q1-q2*q2+q3*q3}};

  double dxPos = BMat[0][0] * LVelVec[0] + BMat[0][1] * LVelVec[1] + BMat[0][2] * LVelVec[2] ;
  double dyPos = BMat[1][0] * LVelVec[0] + BMat[1][1] * LVelVec[1] + BMat[1][2] * LVelVec[2] ;
  double dzPos = BMat[2][0] * LVelVec[0] + BMat[2][1] * LVelVec[1] + BMat[2][2] * LVelVec[2] ;

  //derivative of x,y,z
  double dPosVector[3] = {dxPos, dyPos, dzPos};

  //equations of motion


  double du = r*v - q*w + AccelVec[0];
  double dv = -r*u + p*w + AccelVec[1];
  double dw = q*u - p*v  + AccelVec[2];

/* //Commented out atm since we might not need to touch euler angles. 
  double du = r*v -q*w + (X/mass) - grav*sin(eulerX);
  double dv = -r*u+p*q + (Y/mass) - grav*cos(eulerX)*sin(eulerY);
  double dw = q*u-p*v  + (Z/mass) - grav*cos(eulerX)*cos(eulerY);

  //acceleration in body frame
  double dVelVector[3] = {du, dv, dw};
*/
  //cerr << "Hi everyone!"; 
  //cout << dPosVector[0] << endl;
  // Update Quadcopter Object
  SomeQuad.SetXPos(xPos + dPosVector[0]*dtime);
  SomeQuad.SetYPos(yPos + dPosVector[1]*dtime);
  SomeQuad.SetZPos(zPos + dPosVector[2]*dtime);

  SomeQuad.SetUVel(u + du*dtime);
  SomeQuad.SetVVel(v + dv*dtime);
  SomeQuad.SetWVel(w + dw*dtime);

  delete[] AccelVec;
//  print(dPosVector,3);

//  delete[] QuatVec;
}

void RotationUpdater(Quadcopter & SomeQuad)
{
  double dtime = SomeQuad.GetDTime();
  
  double * AngVelVec;
  AngVelVec = GetAngularVelocity();

  double q0 = SomeQuad.Getq0();
  double q1 = SomeQuad.Getq1();
  double q2 = SomeQuad.Getq2();
  double q3 = SomeQuad.Getq3();
 
  //cerr << "q2: " << q2;
  //cerr << "q3: " << q3;

  double p = SomeQuad.GetPAngVel();
  double q = SomeQuad.GetQAngVel();
  double r = SomeQuad.GetRAngVel();

  //cerr << "p :" << p << endl;
  //cerr << "q :" << q << endl;
  //cerr << "r :" << r << endl;

  double dq0 = (p * q1 + q * q2 + r * q3) / (-2.0);
  double dq1 = ((-1 * p * q0) + (-1 * r * q2) + (q * q3)) / (-2.0);
  double dq2 = ((-1 * q * q0) + (r * q1) + (-1 * p * q3)) / (-2.0);
  double dq3 = ((-1 * r * q0) + (-1 * q * q1) + (p * q2)) / (-2.0);

  //cerr << "dq2: " << dq2 << endl;
  //cerr << "dq3: " << dq3 << endl;

  SomeQuad.Setq0(q0 + dq0 * dtime);
  SomeQuad.Setq1(q1 + dq1 * dtime);
  SomeQuad.Setq2(q2 + dq2 * dtime);
  SomeQuad.Setq3(q3 + dq3 * dtime);

  SomeQuad.SetPAngVel(AngVelVec[0]);
  SomeQuad.SetQAngVel(AngVelVec[1]);
  SomeQuad.SetRAngVel(AngVelVec[2]);
 
  delete[] AngVelVec;
}

double* GetAcceleration(){
  double * AccelVec = new double [3];
  /*
  string input;
  cout << "Insert X-Accel, Y-Accel, Z-Accel Values :" << endl;
  getline(cin, input);
  cin.sync();
  AccelVec[0] = stod(input);
  getline(cin, input);
  cin.sync();
  AccelVec[1] = stod(input);
  getline(cin, input);
  cin.sync();
  AccelVec[2] = stod(input);
  */

  double ax = GY85.accelerometer_x(GY85.readFromAccelerometer());
  double ay = GY85.accelerometer_y(GY85.readFromAccelerometer());
  double az = GY85.accelerometer_z(GY85.readFromAccelerometer());

  AccelVec[0] = map(ax, -1024, 1024, -39.24, 39.24);
  AccelVec[1] = map(ay, -1024, 1024, -39.24, 39.24);
  AccelVec[2] = map(az, -1024, 1024, -39.24, 39.24);

  return AccelVec;
}

double * GetAngularVelocity(){
  double * AngVelVec = new double [3];
/* 
  string input;
  cout << "Insert u-AngVel, v-AngVel, w-AngVel Values: " << endl;
  getline(cin, input);
  cin.sync();
  AngVelVec[0] = stod(input);
  getline(cin, input);
  cin.sync();
  AngVelVec[1] = stod(input);
  getline(cin, input);
  cin.sync();
  AngVelVec[2] = stod(input);
*/
  AngVelVec[0] = 0.0;
  AngVelVec[1] = 0.0;
  AngVelVec[2] = 0.0;

  return AngVelVec;
}

void DisplayState()
{
    Serial.print("xPos : ");
    Serial.print(MyQuad.GetXPos() );
    Serial.print("\tyPos : ");
    Serial.print(MyQuad.GetYPos() );
    Serial.print("\tzPos : ");
    Serial.print(MyQuad.GetZPos() );
    Serial.print("\tuVel : ");
    Serial.print(MyQuad.GetUVel() );
    Serial.print("\tvVel : ");
    Serial.print(MyQuad.GetVVel() );
    Serial.print("\twVel : ");
    Serial.print(MyQuad.GetWVel() );
    /*Serial.print("\tPAngV: ");
    Serial.print(MyQuad.GetPAngVel() );
    Serial.print("\tQAngV: ");
    Serial.print(MyQuad.GetQAngVel() );
    Serial.print("\tRAngV: ");
    Serial.print(MyQuad.GetRAngVel() );
    Serial.print("\tQuat0: ");
    Serial.print(MyQuad.Getq0() );
    Serial.print("\tQuat1: ");
    Serial.print(MyQuad.Getq1() );
    Serial.print("\tQuat2: ");
    Serial.print(MyQuad.Getq2() );
    Serial.print("\tQuat3: ");
    Serial.print(MyQuad.Getq3() );*/
    Serial.print('\n');
}
